#!/usr/bin/env bash
set -e

_input="$1"

# Get the issue URL as $_url. Error if bad input or user lacks access.
_url=
if ! _url=$(gh issue view --json url --jq '.url' ${_input}); then
  echo "Error: Unable to retrieve issue details" >&2
  exit 1
fi

# Pull out some URL parts for re-use.
_nwo=${_url#https://github.com/}
_nwo=${_nwo%%/issues/*}
_num=${_url##*/}

# Get the issue body and comments as $_blob.
_blob=$(gh issue view --json title,body,comments ${_url})

# List issue URLs from the body and comments, as $LinksTo.
LinksTo="$(printf "%s\n" "${_blob}" | \
  sed -e 's/https/\nhttps/g'| \
  grep -Eo 'https://github.com/[^/]+/[^/]+/issues/[0-9]+'| \
  sort -u)"

# List issues that cross-reference this one, as $LinkedFrom.
_api="/repos/${_nwo}/issues/${_num}/timeline"
LinkedFrom="$(gh api \
  -H "Accept: application/vnd.github+json" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  ${_api} \
  -q 'map(select(.event == "cross-referenced"))
      | .[].source.issue.html_url' | \
  sort -u)"

# Print the results.
echo "Links to:"
printf "%s\n" "${LinksTo}"
echo
echo "Linked from:"
printf "%s\n" "${LinkedFrom}"
